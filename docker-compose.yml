version: '3.9'

x-airflow-common:
  &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow.spark
  image: airflow-spark:2.8.1
  environment:
    &airflow-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: '1NqR7i4GVson-_qLmkCMIll73-TM_7_HQKJD0l2hf48='
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./scripts:/opt/airflow/scripts
    - ./plugins:/opt/airflow/plugins
    - ./logs:/opt/airflow/logs
    - ./data:/opt/airflow/data         # volume para dados parquet/csv, bronze/silver/gold
  depends_on:
    - postgres
  restart: always

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      retries: 5
    restart: always


  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    command: >
      bash -c "
        airflow db upgrade &&
        airflow users create --username admin --password admin --firstname Air --lastname Flow --role Admin --email admin@example.com
      "
    depends_on:
      postgres:
        condition: service_healthy


  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    command: webserver
    depends_on:
      postgres:
        condition: service_healthy

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: scheduler
    depends_on:
      postgres:
        condition: service_healthy

  spark:
    image: bitnami/spark:3.5.0
    container_name: spark
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8081:8081"
    volumes:
      - ./scripts:/app/scripts
      - ./data:/app/data                # dados parquet que o Spark vai acessar
    restart: always

  streamlit:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: streamlit_dashboard
    ports:
      - "8501:8501"
    volumes:
      - ./data/Gold:/opt/airflow/data/Gold
      - ./dashboard:/app
    depends_on:
      - spark
    environment:
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    command: streamlit run /app/app.py --server.port=8501 --server.address=0.0.0.0
    restart: always   

volumes:
  postgres_data:
